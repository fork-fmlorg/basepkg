#!/bin/sh

: ${SRC:=/usr/src}
: ${OBJ:=/usr/obj}
: ${PKGSRC:=/usr/pkgsrc}
: ${PACKAGES:=./packages}
host="$(hostname)"
machine="$(uname -m)"
machine_arch="$(uname -p)"
opsys="$(uname)"
osversion="$(uname -r)"
pkgtoolversion=""
prog="${0##*/}"
rcsid='$NetBSD: make_basepkg.sh,v 0.01 2016/10/19 15:36:22 enomoto Exp $'
utcdate="$(env TZ=UTC LOCALE=C date '+%Y-%m-%d %H:%M')"
user="${USER:-root}"
sets="${OBJ}/releasedir/${machine}/binary/sets"

if [ -f ${PKGSRC}/pkgtools/pkg_install/files/lib/version.h ]; then
	pkgtoolversion="$(awk '/PKGTOOLS_VERSION/ {print $3}' \
	${PKGSRC}/pkgtools/pkg_install/files/lib/version.h)"
else
	pkgtoolversion="20160410"
fi

###################################################
# make_dirtree -- Output Commmand For pkg_create.
#                 Base Root Hierarchy Information.
#
# Argument: None.
###################################################
make_dirtree() {
	arch_file=""
	if [ $machine = "amd64" ]; then
		arch_file="$SRC/etc/mtree/NetBSD.dist.$machine_arch" # XXX Only, amd64
	fi
	cat $SRC/etc/mtree/NetBSD.dist.base $arch_file | mtree -C | sed 's/^\.\///g' | \
	awk '{print "@exec install -d -o root -g wheel -m "substr($5, 6) " "$1 }' 
}

###########################################
# extract_base -- Extract Base Binary Sets
#
# Argument: None.
###########################################
extract_base() {
	for i in base comp etc games kern-GENERIC man misc modules tests text
	do
		test -d ./work/$i || mkdir -p ./work/$i
		tar zxvf $sets/$i.tgz -C ./work/$i
	done
}

make_list(){
	for i in "$@"
	do
  	echo "making $i package contents list..."
		if [ ! -d ./work/list ]; then
			mkdir -p ./work/list
		fi	
		find work/$i -type f | grep -v "mtree" | \
  	grep -v "obsolete" | sed "s/^work\/$i\///g" > work/list/file.$i
	done
}

###################################################
# make_BUILD_INFO -- Output String For +BUILD_INFO
#
# Argument: Set/Packages Name (ex. base/openssl)
###################################################
make_BUILD_INFO(){
	echo "making $1 package build infomation..."
	echo "OPSYS=$opsys" > ./sets/$1/+BUILD_INFO
	echo "OS_VERSION=$osversion" >> ./sets/$1/+BUILD_INFO
	echo "OBJECT_FMT=ELF" >> ./sets/$1/+BUILD_INFO
	echo "MACHINE_ARCH=$machine_arch" >> ./sets/$1/+BUILD_INFO
	echo "MACHINE_GNU_ARCH=${MACHINE_GNU_ARCH}" >> ./sets/$1/+BUILD_INFO
	echo "PKGTOOLS_VERSION=$pkgtoolversion" >> ./sets/$1/+BUILD_INFO
}

#############################################
# make_COMMENT -- Output String For +COMMENT
#
# Argument: Packages Name
#############################################
make_COMMENT(){
	echo "making $1 package comment..."
	echo "System Package for $1" > ./sets/$1/+COMMENT
}

###############################################
# make_CONTENTS -- Output String For +CONTENTS
#
# Argument: Packages Name
###############################################
make_CONTENTS(){
	set_name=`echo $1 | awk 'BEGIN{FS="/"} {print $1}'`
	pkg_name=`echo $1 | awk 'BEGIN{FS="/"} {print $2}'`
	echo "making $1 package contents from list..."
	echo "@name $set_name-$pkg_name-`sh ${SRC}/sys/conf/osrelease.sh`" > sets/$1/+CONTENTS
	echo "@comment Packaged at ${utcdate} UTC by ${user}@${host}" >> ./sets/$1/+CONTENTS
	echo "@comment Packaged using ${prog} ${rcsid}" >> ./sets/$1/+CONTENTS
	echo "@cwd /" >> ./sets/$1/+CONTENTS
	cat ./sets/$1/$pkg_name.list | grep -v '+[A-Z]' >> ./sets/$1/+CONTENTS
}

#######################################
# make_DESC -- Output String For +DESC
#
# Argument: Packages Name
#######################################
make_DESC(){
	echo "making $1 package description..."
	echo "NetBSD base system" > sets/$1/+DESC
	echo "" >> sets/$1/+DESC
	echo "Homepage:" >> sets/$1/+DESC
	echo "http://www.netbsd.org/" >> sets/$1/+DESC
}

#####################################
# make_PKG -- Create Package Tarball
#
# Argument: Packages Name
#####################################
make_PKG(){
	setname=`echo $1 | awk 'BEGIN{FS="/"} {print $1}'`
	pkgname=`echo $1 | awk 'BEGIN{FS="/"} {print $2}'`
 	echo "making $1 package using pkg_create..."
 	pkg_create -l -U -B sets/$1/+BUILD_INFO -c sets/$1/+COMMENT \
 	-d sets/$1/+DESC -f sets/$1/+CONTENTS -I / -p ${PWD}/work/$setname $setname-$pkgname
 	mv ./$setname-$pkgname.tgz ${PACKAGES}/$setname-$pkgname.tgz
}

######################################################
# clean_plus_file -- Remove Packages Information File
#
# Argument: None.
######################################################
clean_plus_file(){
	find ./sets -name '\+[A-Z]*' | xargs rm -f
}

